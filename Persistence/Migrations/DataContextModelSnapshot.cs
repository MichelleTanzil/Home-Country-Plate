// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence;

namespace Persistence.Migrations
{
  [DbContext(typeof(DataContext))]
  partial class DataContextModelSnapshot : ModelSnapshot
  {
    protected override void BuildModel(ModelBuilder modelBuilder)
    {
#pragma warning disable 612, 618
      modelBuilder
          .HasAnnotation("ProductVersion", "3.1.0");

      modelBuilder.Entity("Domain.AppUser", b =>
          {
            b.Property<string>("Id")
                      .HasColumnType("TEXT");

            b.Property<int>("AccessFailedCount")
                      .HasColumnType("INTEGER");

            b.Property<string>("Bio")
                      .HasColumnType("TEXT");

            b.Property<string>("ConcurrencyStamp")
                      .IsConcurrencyToken()
                      .HasColumnType("TEXT");

            b.Property<string>("DisplayName")
                      .HasColumnType("TEXT");

            b.Property<string>("Email")
                      .HasColumnType("TEXT")
                      .HasMaxLength(256);

            b.Property<bool>("EmailConfirmed")
                      .HasColumnType("INTEGER");

            b.Property<bool>("LockoutEnabled")
                      .HasColumnType("INTEGER");

            b.Property<DateTimeOffset?>("LockoutEnd")
                      .HasColumnType("TEXT");

            b.Property<string>("NormalizedEmail")
                      .HasColumnType("TEXT")
                      .HasMaxLength(256);

            b.Property<string>("NormalizedUserName")
                      .HasColumnType("TEXT")
                      .HasMaxLength(256);

            b.Property<string>("PasswordHash")
                      .HasColumnType("TEXT");

            b.Property<string>("PhoneNumber")
                      .HasColumnType("TEXT");

            b.Property<bool>("PhoneNumberConfirmed")
                      .HasColumnType("INTEGER");

            b.Property<string>("SecurityStamp")
                      .HasColumnType("TEXT");

            b.Property<bool>("TwoFactorEnabled")
                      .HasColumnType("INTEGER");

            b.Property<string>("UserName")
                      .HasColumnType("TEXT")
                      .HasMaxLength(256);

            b.HasKey("Id");

            b.HasIndex("NormalizedEmail")
                      .HasName("EmailIndex");

            b.HasIndex("NormalizedUserName")
                      .IsUnique()
                      .HasName("UserNameIndex");

            b.ToTable("AspNetUsers");
          });

      modelBuilder.Entity("Domain.Cart", b =>
          {
            b.Property<Guid>("Id")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("TEXT");

            b.Property<float>("Total")
                      .HasColumnType("REAL");

            b.Property<string>("UserId")
                      .HasColumnType("TEXT");

            b.HasKey("Id");

            b.HasIndex("UserId")
                      .IsUnique();

            b.ToTable("UserCart");
          });

      modelBuilder.Entity("Domain.CartItem", b =>
          {
            b.Property<int>("Id")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("INTEGER");

            b.Property<Guid?>("CartId")
                      .HasColumnType("TEXT");

            b.Property<string>("Image")
                      .HasColumnType("TEXT");

            b.Property<float>("Price")
                      .HasColumnType("REAL");

            b.Property<Guid>("ProductId")
                      .HasColumnType("TEXT");

            b.Property<string>("Title");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

            b.Property<int>("quantity")
                      .HasColumnType("INTEGER");

            b.HasKey("Id");

            b.HasIndex("CartId");

                    b.ToTable("CartItem");
                });

      modelBuilder.Entity("Domain.Order", b =>
          {
            b.Property<Guid>("Id")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("TEXT");

            b.Property<string>("AppUserId")
                      .HasColumnType("TEXT");

            b.Property<DateTime>("BoughtOn")
                      .HasColumnType("TEXT");

            b.Property<Guid?>("PurchaseId")
                      .HasColumnType("TEXT");

            b.HasKey("Id");

            b.HasIndex("AppUserId");

            b.HasIndex("PurchaseId");

            b.ToTable("UserOrders");
          });

      modelBuilder.Entity("Domain.Photo", b =>
          {
            b.Property<string>("Id")
                      .HasColumnType("TEXT");

            b.Property<string>("AppUserId")
                      .HasColumnType("TEXT");

            b.Property<bool>("IsMain")
                      .HasColumnType("INTEGER");

            b.Property<Guid?>("ProductId")
                      .HasColumnType("TEXT");

            b.Property<string>("Url")
                      .HasColumnType("TEXT");

            b.HasKey("Id");

            b.HasIndex("AppUserId");

            b.HasIndex("ProductId");

            b.ToTable("Photos");
          });

            modelBuilder.Entity("Domain.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

            b.Property<string>("Category")
                      .HasColumnType("TEXT");

            b.Property<string>("City")
                      .HasColumnType("TEXT");

            b.Property<string>("Description")
                      .HasColumnType("TEXT");

            b.Property<string>("Image")
                      .HasColumnType("TEXT");

            b.Property<float>("Price")
                      .HasColumnType("REAL");

            b.Property<string>("State")
                      .HasColumnType("TEXT");

            b.Property<string>("Title")
                      .HasColumnType("TEXT");

            b.HasKey("Id");

            b.ToTable("Products");
          });

      modelBuilder.Entity("Domain.UserProduct", b =>
          {
            b.Property<string>("AppUserId")
                      .HasColumnType("TEXT");

            b.Property<Guid>("ProductId")
                      .HasColumnType("TEXT");

            b.Property<bool>("IsChef")
                      .HasColumnType("INTEGER");

            b.HasKey("AppUserId", "ProductId");

            b.HasIndex("ProductId");

            b.ToTable("UserProducts");
          });

      modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
          {
            b.Property<string>("Id")
                      .HasColumnType("TEXT");

            b.Property<string>("ConcurrencyStamp")
                      .IsConcurrencyToken()
                      .HasColumnType("TEXT");

            b.Property<string>("Name")
                      .HasColumnType("TEXT")
                      .HasMaxLength(256);

            b.Property<string>("NormalizedName")
                      .HasColumnType("TEXT")
                      .HasMaxLength(256);

            b.HasKey("Id");

            b.HasIndex("NormalizedName")
                      .IsUnique()
                      .HasName("RoleNameIndex");

            b.ToTable("AspNetRoles");
          });

      modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
          {
            b.Property<int>("Id")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("INTEGER");

            b.Property<string>("ClaimType")
                      .HasColumnType("TEXT");

            b.Property<string>("ClaimValue")
                      .HasColumnType("TEXT");

            b.Property<string>("RoleId")
                      .IsRequired()
                      .HasColumnType("TEXT");

            b.HasKey("Id");

            b.HasIndex("RoleId");

            b.ToTable("AspNetRoleClaims");
          });

      modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
          {
            b.Property<int>("Id")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("INTEGER");

            b.Property<string>("ClaimType")
                      .HasColumnType("TEXT");

            b.Property<string>("ClaimValue")
                      .HasColumnType("TEXT");

            b.Property<string>("UserId")
                      .IsRequired()
                      .HasColumnType("TEXT");

            b.HasKey("Id");

            b.HasIndex("UserId");

            b.ToTable("AspNetUserClaims");
          });

      modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
          {
            b.Property<string>("LoginProvider")
                      .HasColumnType("TEXT");

            b.Property<string>("ProviderKey")
                      .HasColumnType("TEXT");

            b.Property<string>("ProviderDisplayName")
                      .HasColumnType("TEXT");

            b.Property<string>("UserId")
                      .IsRequired()
                      .HasColumnType("TEXT");

            b.HasKey("LoginProvider", "ProviderKey");

            b.HasIndex("UserId");

            b.ToTable("AspNetUserLogins");
          });

      modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
          {
            b.Property<string>("UserId")
                      .HasColumnType("TEXT");

            b.Property<string>("RoleId")
                      .HasColumnType("TEXT");

            b.HasKey("UserId", "RoleId");

            b.HasIndex("RoleId");

            b.ToTable("AspNetUserRoles");
          });

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Domain.Cart", b =>
                {
                    b.HasOne("Domain.AppUser", "AppUser")
                        .WithOne("UserCart")
                        .HasForeignKey("Domain.Cart", "UserId");
                });

            modelBuilder.Entity("Domain.CartItem", b =>
                {
                    b.HasOne("Domain.Cart", null)
                        .WithMany("ItemsInCart")
                        .HasForeignKey("CartId");
                });

            modelBuilder.Entity("Domain.Order", b =>
                {
                    b.HasOne("Domain.AppUser", "AppUser")
                        .WithMany("UserOrders")
                        .HasForeignKey("AppUserId");

                    b.HasOne("Domain.Cart", "Purchase")
                        .WithMany()
                        .HasForeignKey("PurchaseId");
                });

            modelBuilder.Entity("Domain.Photo", b =>
                {
                    b.HasOne("Domain.AppUser", null)
                        .WithMany("UserPhotos")
                        .HasForeignKey("AppUserId");

                    b.HasOne("Domain.Product", null)
                        .WithMany("ProductPhotos")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("Domain.UserProduct", b =>
                {
                    b.HasOne("Domain.AppUser", "AppUser")
                        .WithMany("UserProducts")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Product", "Product")
                        .WithMany("UserProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Domain.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Domain.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Domain.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
    }
  }
}
